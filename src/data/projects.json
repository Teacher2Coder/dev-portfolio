[
  {
    "id": 0,
    "title": "Warehouse Management System",
    "name": "warehouse-management-system",
    "description": "This is a warehouse management system that allows users to manage their inventory, orders, and customers.",
    "longDescription": "This is a warehouse management system that allows users to manage their inventory, orders, and customers. Built with React, Tailwind CSS, and Framer Motion in the front-end and C#, .NET, and Entity Framework in the back-end, this application provides a user-friendly interface for managing warehouse operations. The system includes features for tracking inventory levels, processing orders, and managing customer relationships. The application is designed to be responsive and easy to use, with a focus on providing a seamless experience for warehouse staff and managers.",
    "image": "/projects/wms.png",
    "technologies": ["React", "Tailwind CSS", "C#", "Entity Framework", ".NET", "PostgreSQL"],
    "githubUrl": "https://github.com/Teacher2Coder/wms",
    "liveUrl": null,
    "featured": true,
    "category": "Web App",
    "status": "In Progress"
  },
  {
    "id": 1,
    "title": "Walker Texas Services",
    "name": "walker-texas-services",
    "description": "This webpage was made for Walker Texas Services, LLC. The site displays important information about the business, including a list of services offered, a brief about us page, and a contact form.",
    "longDescription": "Walker Texas Services, LLC is a full-service landscaping and lawn care company that provides a wide range of services to residential and commercial clients. The website features a clean, professional design with a focus on showcasing the company's services and capabilities. The site includes a home page with a clear call to action, a services page with detailed descriptions of each service, an about us page with information about the company's history and mission, and a contact page with a form for potential clients to get in touch. The website is built with React and Tailwind CSS, and is hosted on a cloud-based platform. The site is optimized for search engines and is designed to be responsive, ensuring that it looks great on all devices.",
    "image": "/projects/wts.png",
    "technologies": ["React", "Tailwind CSS", "Framer Motion", "Form Submit"],
    "githubUrl": "https://github.com/Teacher2Coder/walkertxservices",
    "liveUrl": "https://walker-txservices.com",
    "featured": true,
    "category": "Static Website",
    "status": "Completed"
  },
  {
    "id": 3,
    "title": "Vitemaker", 
    "name": "vitemaker",
    "description": "This CLI tool enables React developers to quickly create a client side application using React, Vite, Tailwind CSS and other common packages!",
    "longDescription": "Vitemaker is a comprehensive CLI tool that empowers developers to quickly scaffold React applications with Vite, Tailwind CSS, and other essential packages. Sure there are other tools out there that do this, but I wanted to create my own to steamline the process for creating React applications the way that I like to do it. The tool streamlines the setup process by generating a fully functional React project with optimized configurations for modern web development. Key features include automatic installation of dependencies, creation of project structure, and configuration of build tools for seamless deployment. The application includes a user-friendly command-line interface that guides users through the setup process, providing helpful prompts and error handling for a smooth development experience. The tool supports customization of project settings, including theme selection, component organization, and styling options. The generated project is optimized for performance, accessibility, and maintainability, making it an ideal starting point for new React applications.",
    "image": "/projects/vite.png",
    "technologies": ["C#", ".NET Framework", "CLI"],
    "githubUrl": "https://github.com/Teacher2Coder/vitemaker",
    "liveUrl": null,
    "featured": false,
    "category": "CLI Tool",
    "status": "Completed"
  },
  {
    "id": 4,
    "title": "EduTracker",
    "name": "edutracker",
    "description": "This app allows teachers and students to track their progress in a course by creating and sharing assignments, quizzes, and other learning materials.",
    "longDescription": "EduTracker is a comprehensive educational management platform built to streamline the teaching and learning process. The application features a robust PostgreSQL database backend that securely stores user profiles, course content, and progress tracking data. Teachers can create interactive assignments and quizzes with multimedia support, while students can submit work, track their grades, and monitor their learning progress through intuitive dashboards. The React frontend provides a responsive, user-friendly interface optimized for both desktop and mobile devices. Built with Express.js and Node.js, the backend implements RESTful APIs for seamless data management and real-time updates. The application includes role-based authentication, ensuring secure access control between teachers and students. Chakra UI components provide a consistent, accessible design system throughout the application, while advanced features include progress analytics, deadline notifications, and collaborative learning tools.",
    "image": "/projects/edutracker.png",
    "technologies": ["PostgreSQL", "Express", "React", "Node.js", "Chakra UI"],
    "githubUrl": "https://github.com/Teacher2Coder/edtracker",
    "liveUrl": null,
    "featured": false,
    "category": "Web App",
    "status": "In Progress"
  },
  {
    "id": 5,
    "title": "Gamer-Bud",
    "name": "gamer-bud",
    "description": "This app allows gamers to find new friends to play various video games accross various platforms!",
    "longDescription": "Gamer-Bud is a dynamic social networking platform designed specifically for the gaming community. The application leverages the RAWG API to provide comprehensive game database functionality, allowing users to search, discover, and connect over thousands of games across multiple platforms including PC, PlayStation, Xbox, and Nintendo. Built on the MERN stack with MongoDB for flexible data storage, the platform features sophisticated user matching algorithms that connect gamers based on shared interests, preferred platforms, and gaming schedules. The React frontend delivers an engaging, responsive interface with real-time chat functionality, friend requests, and group formation features. Users can create detailed profiles showcasing their gaming preferences, favorite genres, and skill levels. The Express.js backend handles complex queries and data relationships, while Node.js ensures optimal performance for concurrent users. Chakra UI provides a modern, gaming-focused design aesthetic with dark mode support and customizable themes. The application also includes advanced features like game recommendation engines, tournament organization tools, and integrated voice chat capabilities.",
    "image": "/projects/gamer-bud.png",
    "technologies": ["MongoDB", "Express", "React", "Node.js", "RAWG API", "Chakra UI"],
    "githubUrl": "https://github.com/Teacher2Coder/gamer-bud",
    "liveUrl": "https://gamer-bud-fbdv.onrender.com",
    "featured": true,
    "category": "Web App",
    "status": "Completed"
  },
  {
    "id": 6,
    "title": "DMs & DMs",
    "name": "dms-and-dms",
    "description": "This app allows users to create and share ideas for characters, stories, rules and quests with other Dungeon Masters around the world!",
    "longDescription": "DMs & DMs is a comprehensive content management and sharing platform built specifically for Dungeon Masters and tabletop RPG enthusiasts. The application serves as a collaborative hub where DMs can create, organize, and share campaign materials including character backstories, world-building elements, custom rules, and intricate quest designs. Built with Handlebars templating engine for dynamic server-side rendering, the platform ensures fast page loads and SEO optimization. The Node.js and Express backend provides robust API endpoints for content management, while Sequelize ORM facilitates complex database relationships between users, campaigns, characters, and shared resources. The application features advanced content organization with tagging systems, search functionality, and collaborative editing tools. Users can rate and comment on shared content, creating a community-driven ecosystem for RPG resources. Bootstrap provides responsive design components that work seamlessly across devices, while Lodash utilities enhance data manipulation and filtering capabilities. The platform also includes campaign management tools, session notes, and integration capabilities for popular VTT platforms.",
    "image": "/projects/dms.png",
    "technologies": ["Handlebars", "Node.js", "Express", "Lowdash", "Sequelize", "Bootstrap"],
    "githubUrl": "https://github.com/Teacher2Coder/dms-and-dms",
    "liveUrl": null,
    "featured": false,
    "category": "Web App",
    "status": "Completed"
  },
  {
    "id": 7,
    "title": "CMS Style Blog",
    "name": "cms-blog",
    "description": "This application allows users to create, edit and delete their own blog posts while also reading other blog posts written by other users!",
    "longDescription": "The CMS Style Blog is a full-featured content management system that empowers users to create, manage, and share their thoughts through an intuitive blogging platform. Built with a traditional MVC architecture using Handlebars for templating, the application provides server-side rendering for optimal performance and SEO capabilities. The Express.js framework handles routing and middleware functions, while Node.js powers the backend infrastructure. Sequelize ORM manages complex database relationships between users, posts, comments, and categories, ensuring data integrity and efficient querying. The platform features a rich text editor for post creation, image upload capabilities, and draft management functionality. Users can engage with content through commenting systems, post ratings, and social sharing features. The application includes user authentication and authorization, ensuring secure access to administrative functions. Advanced features include post scheduling, category management, tag systems, and analytics dashboards for tracking post performance. The responsive design ensures optimal viewing across all devices, while the admin panel provides comprehensive content moderation and user management tools.",
    "image": "/projects/cms-blog.png",
    "technologies": ["Handlebars", "Node.js", "Express", "Sequelize"],
    "githubUrl": "https://github.com/Teacher2Coder/cms-blog",
    "liveUrl": null,
    "featured": false,
    "category": "Web App",
    "status": "Completed"
  },
  {
    "id": 8,
    "title": "Marvel Movie Database",
    "name": "marvel-movie-database",
    "description": "This app allows users to see information about the Marvel Movies, store their favorite movies in a list and watch trailers!",
    "longDescription": "The Marvel Movie Database is an interactive entertainment application that serves Marvel Cinematic Universe enthusiasts with comprehensive movie information and multimedia content. The application integrates multiple APIs including the OMDb API for detailed movie metadata and the YouTube API for trailer streaming capabilities. Built as a client-side application using vanilla JavaScript, the project demonstrates proficiency in DOM manipulation, API integration, and responsive design principles. The Bulma CSS framework provides a clean, modern interface with mobile-first responsive components that adapt beautifully across all screen sizes. Users can explore the extensive MCU catalog, view detailed information including cast, plot summaries, release dates, and ratings. The favorites system utilizes local storage to persist user preferences across sessions, while the integrated YouTube player allows seamless trailer viewing without leaving the application. Advanced features include search functionality, filtering by release year or rating, and detailed character information. The application also provides timeline visualization of the MCU phases and cross-references between movies and characters, creating an immersive experience for Marvel fans.",
    "image": "/projects/mcu.png",
    "technologies": ["YouTube API", "Bulma", "OMDb API"],
    "githubUrl": "https://github.com/Teacher2Coder/project-1",
    "liveUrl": "https://teacher2coder.github.io/project-1/",
    "featured": false,
    "category": "Static Website",
    "status": "Completed"
  },
  {
    "id": 9,
    "title": "E-Commerce API",
    "name": "e-commerce-api",
    "description": "This app is the back end for a potential E-Commerce website, allowing a database to create, read, update and delete product information.",
    "longDescription": "The E-Commerce API is a robust, scalable backend solution designed to power modern online retail platforms. Built with Express.js and Node.js, the API provides a comprehensive set of RESTful endpoints for managing products, categories, tags, and their complex relationships. The PostgreSQL database ensures ACID compliance and data integrity, while Sequelize ORM facilitates sophisticated data modeling with associations, validations, and migrations. The API architecture follows industry best practices with proper error handling, input validation, and security middleware implementation. Key features include dynamic product categorization, flexible tagging systems, inventory management, and advanced querying capabilities with filtering, sorting, and pagination. The system supports complex product relationships including variants, bundles, and cross-selling recommendations. Database optimization techniques such as indexing and query optimization ensure high performance even with large product catalogs. The API includes comprehensive testing suites, detailed documentation, and monitoring capabilities. Security features encompass data sanitization, SQL injection prevention, and rate limiting. The modular design allows for easy extension and integration with frontend applications, payment gateways, and third-party services.",
    "image": "/projects/e-commerce.png",
    "technologies": ["PostgreSQL", "Sequelize", "Express"],
    "githubUrl": "https://github.com/Teacher2Coder/e-commerce",
    "liveUrl": null,
    "featured": false,
    "category": "API",
    "status": "Completed"
  },
  {
    "id": 10,
    "title": "Note Taker",
    "name": "note-taker",
    "description": "This app allows users to create, save and delete notes!",
    "longDescription": "The Note Taker application is a streamlined productivity tool designed for efficient note management and organization. Built with Express.js and Node.js, the application provides a clean, intuitive interface for creating, editing, and organizing personal notes. The backend implements RESTful API endpoints for seamless CRUD operations, while the frontend delivers a responsive, single-page application experience. The application uses JSON file storage for simplicity and portability, making it perfect for personal use or small team environments. Key features include real-time note saving, search functionality, and categorization systems that help users organize their thoughts effectively. The Jest testing framework ensures code reliability and maintainability through comprehensive unit and integration tests. The application includes advanced text editing capabilities with markdown support, formatting options, and autosave functionality to prevent data loss. Users can create, update, and delete notes with immediate visual feedback and smooth transitions. The responsive design adapts to various screen sizes, making it accessible on desktop, tablet, and mobile devices. Additional features include note export capabilities, backup functionality, and keyboard shortcuts for power users.",
    "image": "/projects/notes.png",
    "technologies": ["Express", "Jest"],
    "githubUrl": "https://github.com/Teacher2Coder/note-taker",
    "liveUrl": "https://note-taker-58kq.onrender.com",
    "featured": false,
    "category": "Web App",
    "status": "Completed"
  },
  {
    "id": 11,
    "title": "SVG Logo Generator",
    "name": "svg-logo-generator",
    "description": "This app allows users to create simple logos in a .svg file by answering a few questions in the command line!",
    "longDescription": "The SVG Logo Generator is an innovative command-line tool that demonstrates the power of programmatic design and automated content generation. Built entirely with Node.js, the application transforms user input into professional-quality SVG logos through an interactive command-line interface powered by Inquirer.js. The tool prompts users for design preferences including text content, color schemes, shapes, and styling options, then generates clean, scalable vector graphics that can be used across web and print media. The Jest testing framework ensures robust functionality through comprehensive test coverage, validating both the logic and output generation processes. The application showcases advanced JavaScript concepts including object-oriented programming, template literals, and file system operations. Users can choose from multiple geometric shapes including circles, triangles, and squares, with customizable colors, text positioning, and font styling. The generated SVG files are optimized for web use with clean markup and minimal file sizes. The tool includes validation for color inputs (hex codes and named colors), text length limits, and file naming conventions. Advanced features include batch generation capabilities, preset design templates, and export options for different use cases.",
    "image": "/projects/logo-gen.png",
    "technologies": ["Node.js", "Inquirer", "Jest"],
    "githubUrl": "https://github.com/Teacher2Coder/logo-generator",
    "liveUrl": null,
    "featured": false,
    "category": "CLI Tool",
    "status": "Completed"
  },
  {
    "id": 12,
    "title": "Social Media API",
    "name": "social-media-api",
    "description": "This app is the backend for a potential Social Media Website. It utilizes MongoDB and allows users to create, read, update and delete information!",
    "longDescription": "The Social Media API is a comprehensive backend solution designed to power modern social networking platforms with scalability and performance at its core. Built on Node.js and Express.js, the API leverages MongoDB's document-based architecture through Mongoose ODM to handle complex social data relationships efficiently. The system supports core social media functionalities including user profiles, posts, comments, likes, follows, and friend connections with real-time updates. The NoSQL database design accommodates the flexible, nested data structures typical of social media content, while Mongoose provides schema validation, middleware hooks, and query optimization. The API implements sophisticated data modeling with embedded and referenced relationships, enabling efficient queries for social feeds, user interactions, and content discovery. Advanced features include privacy controls, content moderation systems, and analytics tracking for user engagement metrics. The architecture supports horizontal scaling with proper indexing strategies and aggregation pipelines for complex social queries. Security measures include input validation, authentication middleware, rate limiting, and data sanitization to prevent common vulnerabilities. The API also includes features for media handling, notification systems, and integration capabilities for third-party services like image storage and push notifications.",
    "image": "/projects/social-media-api.png",
    "technologies": ["Node.js", "Express", "Mongoose"],
    "githubUrl": "https://github.com/Teacher2Coder/social-media-api",
    "liveUrl": null,
    "featured": false,
    "category": "API",
    "status": "Completed"
  },
  {
    "id": 13,
    "title": "README.md Generator",
    "name": "readme-generator",
    "description": "This app allows a user to create a README.md file with relative ease by just answering a few questions in the command line!",
    "longDescription": "The README.md Generator is a developer productivity tool that streamlines the creation of professional project documentation through an interactive command-line interface. Built with Node.js and powered by Inquirer.js, the application guides users through a series of thoughtful prompts to gather essential project information including description, installation instructions, usage examples, contribution guidelines, and licensing details. The tool demonstrates proficiency in template generation, file system operations, and user experience design within a CLI environment. The application generates comprehensive, well-structured markdown files that follow industry best practices and include all necessary sections for professional open-source projects. Features include dynamic badge generation for various services, license integration with popular open-source licenses, and customizable templates for different project types. The tool validates user input, provides helpful suggestions, and includes formatting options for different markdown elements. Advanced capabilities include GitHub integration for automatic repository linking, screenshot placeholders, and contact information formatting. The generated README files are immediately ready for use and follow modern documentation standards, making projects more accessible and professional for the developer community.",
    "image": "/projects/questions.png",
    "technologies": ["Inquirer"],
    "githubUrl": "https://github.com/Teacher2Coder/README-generator",
    "liveUrl": null,
    "featured": false,
    "category": "CLI Tool",
    "status": "Completed"
  },
  {
    "id": 14,
    "title": "README.md Generator in C#",
    "name": "readme-generator-cs",
    "description": "This app allows a user to create a README.md file with relative ease by just answering a few questions in the command line! This was a refactoring of the original README.md Generator in JavaScript in C# using the .NET Framework.",
    "longDescription": "The README.md Generator in C# represents a comprehensive refactoring project that demonstrates cross-language development skills and the ability to translate JavaScript concepts into C# implementations. Built using the .NET Framework, this console application showcases object-oriented programming principles, strongly-typed language benefits, and C# specific features like LINQ, async/await patterns, and robust exception handling. The application maintains the same user-friendly command-line interface while leveraging C#'s superior type safety and performance characteristics. Key improvements include enhanced input validation through C# data types, better memory management, and more robust error handling mechanisms. The .NET Framework provides access to extensive libraries for file operations, string manipulation, and console interactions, resulting in a more stable and efficient application. The refactoring process involved redesigning the application architecture to take advantage of C# features like interfaces, abstract classes, and dependency injection patterns. Advanced features include configuration file support, logging capabilities, and extended template options that weren't possible in the original JavaScript version. The project demonstrates the ability to analyze existing codebases, identify improvement opportunities, and successfully port functionality across different programming paradigms while maintaining feature parity and enhancing overall performance.",
    "image": "/projects/questions-cs.png",
    "technologies": ["C#", ".NET Framework"],
    "githubUrl": "https://github.com/Teacher2Coder/README-CS",
    "liveUrl": null,
    "featured": false,
    "category": "CLI Tool",
    "status": "Completed"
  },
  {
    "id": 15,
    "title": "Weather Tracker",
    "name": "weather-tracker",
    "description": "This app allows users to get weather data for any city that a user decides to search for from a third party API!",
    "longDescription": "The Weather Tracker is a comprehensive weather information application that provides real-time meteorological data through seamless integration with the OpenWeather API. Built as a responsive web application using vanilla JavaScript and Bootstrap, the project demonstrates proficiency in API consumption, data manipulation, and modern web development practices. The application features an intuitive search interface that allows users to query weather information for any global location, displaying current conditions, temperature, humidity, wind speed, and detailed forecasts. The responsive Bootstrap framework ensures optimal viewing experiences across desktop, tablet, and mobile devices with adaptive layouts and mobile-first design principles. Key features include persistent search history using local storage, dynamic background changes based on weather conditions, and detailed weather metrics with visual indicators. The application implements error handling for invalid city names and API failures, providing users with clear feedback and graceful degradation. Advanced functionality includes geolocation integration for automatic local weather detection, unit conversion between Celsius and Fahrenheit, and extended forecast displays with graphical weather representations. The clean, modern interface prioritizes usability with fast loading times, smooth transitions, and accessibility features that make weather information easily accessible to all users.",
    "image": "/projects/weather.png",
    "technologies": ["Bootstrap", "Open Weather API"],
    "githubUrl": "https://github.com/Teacher2Coder/weather-tracker",
    "liveUrl": "https://teacher2coder.github.io/weather-tracker/",
    "featured": false,
    "category": "Static Website",
    "status": "Completed"
  }
] 